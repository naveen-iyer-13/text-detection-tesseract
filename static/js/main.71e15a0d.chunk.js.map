{"version":3,"sources":["ResultsModal.js","LoadingModal.js","App.js","serviceWorker.js","index.js"],"names":["ResultsModal","props","className","onClick","e","closeModals","event","stopPropagation","headerText","data","map","single","index","key","class","alt","src","img","text","split","item","i","LoadingModal","style","textTransform","Tesseract","window","App","useState","uploads","setUploads","existingList","setExistingList","recentImageData","setRecentImageData","loading","setLoading","showOldResults","setShowOldResults","loadingText","setLoadingText","type","accept","id","onChange","push","URL","createObjectURL","target","files","value","width","margin","display","length","recognize","logger","m","status","then","newObj","tempArray","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71e15a0d.chunk.js","sourcesContent":["import React from 'react';\n\nconst ResultsModal = (props) => (\n  <div className=\"container\" onClick={(e) => props.closeModals(e)}>\n    <div className=\"results-inner\" onClick={event => event.stopPropagation()}>\n      <div className=\"inner-header\">{props.headerText}</div>\n      <div className=\"single-container\">\n        {\n          props.data && props.data.map((single, index) => {\n            return (\n              <div className=\"single\" key={index}>\n                <div class=\"picture\"><img alt={\"single\"+index} className=\"image\" src={single.img} /></div>\n                <div className=\"text\">{single.text.split('\\n').map ((item, i) => <div key={i}>{item}</div>)}</div>\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  </div>\n);\n\nexport default ResultsModal\n","import React from 'react';\n\nconst LoadingModal = (props) => (\n  <div className=\"container\" onClick={(e) => props.closeModals(e)}>\n    <div className=\"inner\" style={{textTransform: \"capitalize\"}} onClick={event => event.stopPropagation()}>\n      {\n        props.text\n      }\n    </div>\n  </div>\n);\n\nexport default LoadingModal\n","import React, { useState } from 'react';\nimport ResultsModal from './ResultsModal'\nimport LoadingModal from './LoadingModal'\nimport './App.css';\n\nvar Tesseract = window.Tesseract;\n\nfunction App(props){\n\n  const [uploads, setUploads] = useState([])\n  const [existingList, setExistingList] = useState([])\n  const [recentImageData, setRecentImageData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [showOldResults, setShowOldResults] = useState(false)\n  const [loadingText, setLoadingText] = useState('')\n\n  const handleChange = (event) => {\n    let uploads = []\n    uploads.push(URL.createObjectURL(event.target.files[0]))\n    setUploads(uploads)\n  }\n\n  const generateText = () => {\n    if (uploads.length > 0) {\n      setLoading(true)\n      Tesseract.recognize(\n        uploads[0],\n        'eng',\n        { logger: m => setLoadingText(m.status) }\n      ).then(({ data: { text } }) => {\n        setLoading(false)\n        let newObj = {img: uploads[0], text: text}\n        setRecentImageData([newObj])\n        setUploads([])\n        var tempArray = [...existingList, newObj]\n        setExistingList(tempArray)\n      })\n    }\n  }\n\n  const closeModals = (e) => {\n    e.stopPropagation()\n    if (!loading) {\n      setLoading(false)\n      setRecentImageData([])\n      setShowOldResults(false)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Text Recognition App</h1>\n      </header>\n\n      { /* File uploader */ }\n      <section className=\"hero\">\n        <label className=\"fileUploaderContainer\">\n          Click here to upload Image\n          <input type=\"file\" accept=\"image/png, image/jpeg\" id=\"fileUploader\" onChange={handleChange} />\n        </label>\n\n        <div>\n          { uploads.map((value, index) => {\n            return <img alt={\"uploaded\"+index} src={value} width=\"150px\" style={{margin: \"20px auto\", display: \"flex\"}}/>\n          }) }\n        </div>\n\n        <button onClick={generateText} className=\"button\">Generate</button>\n        <button onClick={() => setShowOldResults(true)} className=\"button\">Show older results</button>\n\n        {showOldResults && <ResultsModal headerText=\"Result History\" data={existingList} closeModals={closeModals}/>}\n        {loading && <LoadingModal text={loadingText} data={existingList} closeModals={closeModals}/>}\n        {recentImageData.length > 0 && <ResultsModal headerText=\"Result\" data={recentImageData} closeModals={closeModals}/>}\n      </section>\n\n    </div>\n  )\n\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}